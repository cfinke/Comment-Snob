<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://comment-snob/skin/firefox-preferences-page.css" type="text/css"?>
<!DOCTYPE overlay [
	<!ENTITY % localLocale SYSTEM "chrome://comment-snob/locale/locale.dtd">
	%localLocale;
	<!ENTITY % backupLocale SYSTEM "chrome://comment-snob-default-locale/content/locale.dtd">
	%backupLocale;
]>
<prefwindow
	title="&comment_snob.options_page_title;"
	buttons="accept"
	id="comment-snob-options"
	style="min-width: 900px; min-height: 600px; overflow: scroll;"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<stringbundleset id="stringbundleset">
		<stringbundle id="comment-snob-backup-string-bundle" src="chrome://comment-snob-default-locale/content/locale.properties" />
		<stringbundle id="comment-snob-string-bundle" src="chrome://comment-snob/locale/locale.properties" />
	</stringbundleset>
	<script src="chrome://comment-snob/content/overlay.js" type="application/x-javascript"></script>
	<prefpane flex="1" id="all-prefs">
		<hbox id="main-content" flex="1">
			<vbox id="navbar-container" pack="start" flex="1">
				<label class="header">&comment_snob.extName;</label>
				<label class="settings-subtitle">&comment_snob.filteringRules;</label>
				<label id="default-rule" class="navbar-item navbar-item-selected" pagename="rule">&comment_snob.option_default;</label>
				<label class="navbar-item" id="add" pagename="add">&comment_snob.action_add;</label>
			</vbox>
			<vbox id="mainview" flex="5">
				<vbox id="mainview-content" flex="1">
					<vbox id="rulePage" class="page" flex="1">
						<label class="header">&comment_snob.preferences;</label>
						
						<hbox class="section" id="rule-management" flex="1">
							<vbox flex="1">
								<label class="subheader">&comment_snob.ruleManagement;</label>
							</vbox>
							<hbox flex="5">
								<vbox>
									<hbox>
										<button id="update" label="&comment_snob.action_update;" />
										<button id="remove" label="&comment_snob.action_remove;" />
										<spacer flex="1" />
									</hbox>
									<spacer flex="1" />
									<vbox id="update-progress"></vbox>
								</vbox>
								<spacer flex="1" />
							</hbox>
						</hbox>

						<hbox class="section" flex="1">
							<vbox flex="1">
								<label class="subheader">&comment_snob.filteringPreferences;</label>
							</vbox>
							
							<vbox flex="5">
								<vbox id="default-preferences">
									<checkbox id="use-default" label="&comment_snob.label_use_default;" />
								</vbox>
								<vbox id="custom-preferences">
									<vbox class="section">
										<checkbox pref="extreme" class="preference-bool preference" id="extreme" label="&comment_snob.label_hide_all;" />
									</vbox>
									<hbox align="center">
										<textbox size="2" min="0" pref="mistakes" class="preference-int preference" />
										<label>&comment_snob.label_hide_spelling;</label>
									</hbox>
									<checkbox pref="nocaps" class="preference-bool preference" label="&comment_snob.label_hide_no_capital;"/>
									<checkbox pref="allcaps" class="preference-bool preference" label="&comment_snob.label_hide_only_capital;"/>
									<checkbox pref="startsWithCapital" class="preference-bool preference" label="&comment_snob.label_hide_start_lower;"/>
									<checkbox pref="punctuation" class="preference-bool preference" label="&comment_snob.label_hide_too_much_punctuation;"/>
									<checkbox pref="excessiveCapitals" class="preference-bool preference" label="&comment_snob.label_hide_too_much_capitalization;"/>
									<checkbox pref="profanity" class="preference-bool preference" label="&comment_snob.label_hide_too_much_profanity;"/>
									<hbox align="center">
										<textbox size="5" min="0" pref="dictionary" class="preference-text preference" />
										<label>&comment_snob.label_dictionary;</label>
									</hbox>
									<vbox>
										<hbox align="center">
											<label>&comment_snob.label_hide_keywords;</label>
											<textbox pref="keywords" class="preference-text preference" size="40" />
										</hbox>
										<label class="footnote">&comment_snob.text_keywords_instructions;</label>
									</vbox>
								</vbox>
							</vbox>
						</hbox>
					</vbox>
					<vbox id="addPage" class="page" style="display: none;" flex="1">
						<label class="header">&comment_snob.new_rule_header;</label>
						<description>Add your own rule below, or visit <label class="text-link" href="http://www.chrisfinke.com/comment-snob/">the Comment Snob homepage</label> for links to more rules.</description>
						<description>For instructions on writing Comment Snob rules, see <label class="text-link" href="http://www.chrisfinke.com/comment-snob/#howto">this tutorial</label>.</description>
						<description id="rule-error" style="display: none;"></description>
						<vbox class="section">
							<vbox>
								<textbox multiline="true" id="add-rule" cols="80" rows="20"></textbox>
								<hbox>
									<button id="add-finish" label="Save" />
									<spacer flex="1" />
								</hbox>
							</vbox>
							<spacer flex="1" />
						</vbox>
						<vbox class="section">
							<description id="reinstall-youtube">
								<label class="text-link" href="javascript:void(0);" id="install-youtube">&comment_snob.reinstall_youtube;</label>
							</description>
						</vbox>
					</vbox>
				</vbox>
			</vbox>
		</hbox>
	</prefpane>
	<script type="application/x-javascript">
		<![CDATA[
		
		(function(loader){
			loader.loadSubScript("chrome://comment-snob/content/jquery-1.7.2.min.js");
			loader.loadSubScript("chrome://comment-snob/content/options.js");
			
			addEventListener( "load", function () {
				removeEventListener( "load", arguments.callee, false );

				// Instant-apply any preference changes.
				$(".preference").on( "click.comment-snob change.comment-snob blur.comment-snob keyup.comment-snob", COMMENT_SNOB_OPTIONS.save );
				
				$("#extreme").on( 'click.comment-snob', COMMENT_SNOB_OPTIONS.setDisabled );

				$("#remove").on( 'click.comment-snob', function () {
					if (confirm("Are you sure?")) {
						COMMENT_SNOB_UTIL.removeRule( COMMENT_SNOB_OPTIONS.currentRuleID );
						COMMENT_SNOB_OPTIONS.populateRuleList();
					}
				});

				$("#update").on( 'click.comment-snob', function () {
					var progressContainer = $( '#update-progress' );
					progressContainer.text( '' );

					progressContainer.append(
						$( '<description/>' ).text( COMMENT_SNOB.strings.getString( 'label_updating' ) )
					).show();

					var rules = COMMENT_SNOB_UTIL.getJSONPref( "rules", {} );

					if ( COMMENT_SNOB_OPTIONS.currentRuleID in rules ) {
						var currentRule = rules[ COMMENT_SNOB_OPTIONS.currentRuleID ];

						COMMENT_SNOB_UPDATER.updateRule( currentRule, function ( rv ) {
							if ( rv.status ) {
								if ( JSON.stringify( rv.rule ) == JSON.stringify( currentRule ) ) {
									progressContainer.append(
										$( '<description/>' ).text( COMMENT_SNOB.strings.getString( 'label_up_to_date' ) )
									);
								}
								else {
									progressContainer.append(
										$( '<description/>' ).text( COMMENT_SNOB.strings.getString( 'label_updated' ) )
									);
								}
							}
							else if ( rv.msg ) {
								if ( 'msgArgs' in rv ) {
									progressContainer.append(
										$( '<description/>' ).text( COMMENT_SNOB.strings.getFormattedString( rv.msg, rv.msgArgs ) )
									);
								}
								else {
									progressContainer.append(
										$( '<description/>' ).text( COMMENT_SNOB.strings.getString( rv.msg ) )
									);
								}

								if ( "msgDebug" in rv ) {
									var debug = $( '<textbox/>' );
									debug.attr( 'multiline', 'true' );
									debug.attr( 'rows', '8' );
									debug.attr( 'cols', '80' );
									debug.attr( 'value', rv.msgDebug );
									progressContainer.append( debug );
								}
							}
							else {
								progressContainer.append(
									$( '<description/>' ).text( COMMENT_SNOB.strings.getString( 'label_update_error' ) )
								);
							}
						} );
					}
					else {
						progressContainer.append(
							$( '<description/>' ).text( COMMENT_SNOB.strings.getString( 'label_update_error' ) )
						);
					}
				});

				$("#add-finish").on( 'click.comment-snob', function () {
					$("#rule-error").hide();

					var rule = $("#add-rule").val();

					var rv = COMMENT_SNOB_UTIL.addRule( rule );

					if (!rv.status) {
						$("#rule-error").text(rv.msg).show();
					}
					else {
						COMMENT_SNOB_OPTIONS.populateRuleList();
						$("#navbar-container label[ruleid='" + rv.rule.id + "']").click();
						$("#add-rule").val("");
					}
				});

				$( "#navbar-container" ).on( "click", ".navbar-item", function () {
					$(".navbar-item-selected").removeClass("navbar-item-selected");
					$(this).addClass("navbar-item-selected");
					$(".page").hide();
					$("#" + $(this).attr("pagename") + "Page").show();
				});

				$( "#navbar-container" ).on( "click", "#default-rule, .user-rule", function () {
					COMMENT_SNOB_OPTIONS.showRuleSettings($(this).attr("ruleid"));

					if ($(this).attr("ruleid")) {
						$("#remove").removeAttr("disabled");
					}
					else {
						$("#remove").attr("disabled", true);
					}
				});

				$("#install-youtube").on( "click", function (e) {
					e.preventDefault();

					COMMENT_SNOB_UTIL.addRule(COMMENT_SNOB_UTIL.youtubeRule);
					COMMENT_SNOB_OPTIONS.populateRuleList();
					$(".user-rule[ruleid='youtube@chrisfinke.com']").click();
				});

				$("#use-default").on( 'click.comment-snob', function () {
					COMMENT_SNOB_OPTIONS.useDefaultChange();
				});

				COMMENT_SNOB_OPTIONS.populateRuleList();

				COMMENT_SNOB_OPTIONS.showRuleSettings();
			}, false);
		})( Components.classes["@mozilla.org/moz/jssubscript-loader;1"].getService( Components.interfaces.mozIJSSubScriptLoader ) );
		
		]]>
	</script>
</prefwindow>